from itsdangerous import URLSafeTimedSerializer
import os
from src.utils.redis_pool import get_redis
from datetime import timedelta

SECRET = os.getenv("SECRET_KEY", "change_me")
SALT = "password-reset-salt"
s = URLSafeTimedSerializer(SECRET)

def generate_reset_token(email: str) -> str:
    """
    Generate a time-limited token for password reset.

    Args:
        email (str): User's email address.

    Returns:
        str: Token that can be used to verify password reset requests.
    """
    return s.dumps(email, salt=SALT)

def verify_reset_token(token: str, max_age: int = 3600) -> str:
    """
    Verify a password reset token and extract the email.

    Args:
        token (str): The token generated by `generate_reset_token`.
        max_age (int, optional): Maximum age of the token in seconds. Defaults to 3600.

    Returns:
        str | None: Email if the token is valid; otherwise, None.
    """
    try:
        email = s.loads(token, salt=SALT, max_age=max_age)
    except Exception:
        return None
    return email
